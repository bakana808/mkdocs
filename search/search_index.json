{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Homepage","text":"<p>Publish your public notes with MkDocs</p>"},{"location":"#hello-world","title":"Hello World!","text":"<p>The <code>index.md</code> in the <code>/docs</code> folder is the homepage you see here.</p> <p>The folders in <code>/docs</code> appear as the main sections on the navigation bar.</p> <p>The notes appear as pages within these sections. For example, Creating an FPS Controller in <code>Topic 1</code></p>"},{"location":"seedbox/","title":"Seedbox","text":""},{"location":"seedbox/#filebrowser-file-browser-webapp","title":"filebrowser - file browser webapp","text":""},{"location":"seedbox/#installing","title":"Installing","text":"<ol> <li><code>docker pull filebrowser/filebrowser</code></li> <li>create empty <code>filebrowser.db</code> file <pre><code>touch filebrowser.db\n</code></pre></li> </ol> <p>Running <pre><code>docker run \\\n    -v /path/to/root:/srv \\\n    -v /path/to/filebrowser.db:/database/filebrowser.db \\\n    -v /path/to/settings.json:/config/settings.json \\\n    -e PUID=$(id -u) \\\n    -e PGID=$(id -g) \\\n    -p 8080:80 \\\n    filebrowser/filebrowser:s6\n</code></pre></p>"},{"location":"seedbox/#mango-manga-reader-webapp","title":"mango - manga reader webapp","text":""},{"location":"seedbox/#installing_1","title":"Installing","text":"<ol> <li><code>docker pull hkalexling/mango</code></li> <li>create <code>docker-compose.yml</code> (see https://hub.docker.com/r/hkalexling/mango)</li> </ol>"},{"location":"seedbox/#running","title":"Running","text":"<ol> <li><code>docker-compose up</code></li> </ol> <p>whatbox will probably prevent you from opening certain ports and will suggest another port, edit <code>docker-compose.yml</code> to use the suggested port.</p>"},{"location":"gamedev/godot/Buffered%20Input%20System/","title":"Buffered Input System","text":"<p>Many games have a buffered input system, such as fighting games. This reduces the amount of dropped inputs by allowing a \"buffer\" (a window of time, usually in frames) where if the player pressed the input too early but was within the buffer, the input will still register as pressed.</p> <p>For example, consider a platform game where the player can only jump from the floor. The player is falling from the air, and tried to press jump as they were about to land.</p> <p>With a normal input system, if the player pressed jump at any time before the time they actually landed, even if it was a couple frames early, the input would be dropped.</p> <p>With a buffered input system, we can set a buffer for which the input would still go through even if it was early. For example, with a 4-frame buffer, the player could press jump 4 frames before they landed and the jump will still happen.</p>"},{"location":"gamedev/godot/External%20Editors/","title":"VSCode","text":""},{"location":"gamedev/godot/External%20Editors/#windowslinux","title":"Windows/Linux","text":"<p>Exec Path:  <pre><code>code\n</code></pre> Exec Flags:  <pre><code>--reuse-window {project} --goto {file}:{line}:{col}\n</code></pre></p>"},{"location":"gamedev/godot/External%20Editors/#linux-flatpak","title":"Linux (Flatpak)","text":"<p>Exec Path:  <pre><code>flatpak-spawn\n</code></pre> Exec Flags:  <pre><code>--host code --reuse-window {project} --goto {file}:{line}:{col}\n</code></pre></p>"},{"location":"gamedev/godot/Font%20Data%20Half-Pixel%20Fix/","title":"Font Data Half Pixel Fix","text":"<p>If you are using an image imported as font data, and the font characters are always off by half a pixel (see below image), use the following shader:</p> <p></p> <pre><code>shader_type canvas_item;\n\nuniform vec2 offset = vec2(0, -0.5);\n\nvoid vertex() {\n    VERTEX += (SCREEN_MATRIX * vec4(TEXTURE_PIXEL_SIZE, 0, 1)).xy * offset;\n}\n</code></pre>"},{"location":"gamedev/godot/Freeing%20Many%20Nodes%20At%20Once/","title":"Freeing Many Nodes At Once","text":"<p>If you run into the problem of your game crashing when freeing a large amount (100s) of nodes at once, that is, trying to run something like:</p> <pre><code>for node in get_tree().get_nodes_in_group(\"group\"):\n    node.queue_free()\n</code></pre> <p>here is a workaround that might work.</p>"},{"location":"gamedev/godot/Freeing%20Many%20Nodes%20At%20Once/#batched-queue_free","title":"Batched <code>queue_free()</code>","text":"<p>The idea here is instead of freeing all of the nodes at once, only free some of them per tick:</p> <pre><code>const MAX_NODE_DELETIONS = 5\nvar nodes_queued_for_deletion := []\n\nfunc free_nodes():\n    # add all nodes you want to delete here\n\u00a0 \u00a0 for node in get_tree().get_nodes_in_group(\"group\"):\n\u00a0 \u00a0 \u00a0 \u00a0 nodes_queued_for_deletion.append(node)\n\nfunc _physics_process(_delta):\n    # free batches of nodes at a time here\n\u00a0 \u00a0 for node in nodes_queued_for_deletion.slice(0, MAX_NODE_DELETIONS):\n\u00a0 \u00a0 \u00a0 \u00a0 if is_instance_valid(node): bullet.queue_free()\n\u00a0 \u00a0 nodes_queued_for_deletion = nodes_queued_for_deletion.slice(MAX_NODE_DELETIONS)\n</code></pre>"},{"location":"gamedev/godot/Get%20List%20of%20Files%20in%20a%20Folder/","title":"Get List of Files in a Folder","text":""},{"location":"gamedev/godot/Get%20List%20of%20Files%20in%20a%20Folder/#scan_folderdirname-extensions","title":"<code>scan_folder(dirname, extensions)</code>","text":"<p>Returns a list of files in a directory that has the given extension.</p> <pre><code>static func scan_folder(dirname: String, extensions: PackedStringArray) -&gt; PackedStringArray:\n\u00a0 \u00a0 var dir = DirAccess.open(dirname)\n\u00a0 \u00a0 var filepaths = PackedStringArray()\n\n\u00a0 \u00a0 if dir:\n\u00a0 \u00a0 \u00a0 \u00a0 dir.list_dir_begin()\n\u00a0 \u00a0 \u00a0 \u00a0 while true:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 var path := dir.get_next()\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if path == \"\": break\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if path.get_extension() in extensions:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # items.append(LevelSelection.new(path))\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 var filepath = dirname + path\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 filepaths.append(filepath)\n\n\u00a0 \u00a0 \u00a0 \u00a0 dir.list_dir_end()\n\n\u00a0 \u00a0 return filepaths\n\n# Examples:\nscan_folder(\"levels/\", [\"tscn\"])  # list all .tscn files in the \"levels\" folder\n</code></pre>"},{"location":"gamedev/godot/Palettes%20%26%20Dithering/","title":"Palettes & Dithering","text":""},{"location":"gamedev/godot/Palettes%20%26%20Dithering/#color-palette-mapping-shader","title":"Color Palette Mapping Shader","text":"<p>This shader provides the function <code>find_closest_color(src)</code>.  This function will return the closest color in the palette by color distance function <code>color_distance(a, b)</code> (different color distance function implementations discussed below).</p> <p>The process <pre><code>uniform sampler2D palette_texture;  // an image of 8 colors laid out horizontally\nuniform int palette_size = 8;  // the number of colors in the palette\n\nvec3 find_closest_color(vec3 color) {\n\n    vec3 final_color = vec3(0); \n    float final_distance = 100000;\n\n    for( int u = 0; u &lt; palette_size; u += 1 ) {\n\n        vec2 pal_uv = vec2(float(u) / float(palette_size), 0.0);\n        vec3 pal_color = texture(palette_texture, pal_uv).rgb;\n\n        if( color_distance(pal_color.rgb, color.rgb) &lt; color_distance(final_color.rgb, color.rgb) ) {\n            final_color = pal_color;\n        }\n    }\n\n    return color;\n}\n\n// example usage\nfunc fragment() {\n    COLOR.rgb = find_closest_color(COLOR.rgb);\n}\n</code></pre></p>"},{"location":"gamedev/godot/Palettes%20%26%20Dithering/#color-masking","title":"Color Masking","text":"<p>The following additions to the shader allow for defining color masks. Color masks are used to limit the output color to a subset of the given palette. This is represented by a bitfield, which is stored into the uniform int <code>palette_mask</code>.</p> <p>For example, if we have an 8-color palette and the <code>palette_mask</code> is <code>15</code>, or <code>00001111</code> in binary, the output color is limited to only the first 4 colors of the palette.</p> <p>Note that the binary number has as many digits as the number of colors in the palette, and is in reverse order of the color order of the palette texture (the right-most digit corresponds to the left-most color, etc.).</p> <p>Additional note: It is possible to input binary numbers in the Godot inspector by prefixing the number with <code>0b</code>. For example, setting <code>palette_mask</code> to <code>0b11111111</code> under the shader parameters will output <code>256</code>. <pre><code>uniform sampler2D palette_texture;  // an image of 8 colors laid out horizontally\nuniform int palette_size = 8;  // the number of colors in the palette\nuniform int palette_mask = 256;  // 0b11111111\n\nvec3 find_closest_color(vec3 src) {\n\n    vec3 color = vec3(-20.0); \n\n    for( int u = 0; u &lt; palette_size; u += 1 ) {\n        if( bitfieldExtract(palette_mask, int(u), 1) == 0u ) { continue; }\n\n        vec2 pal_uv = vec2(float(u) / float(palette_size), 0.0);\n        vec3 pal_color = texture(palette_texture, pal_uv).rgb;\n\n        if( color_distance(pal_color.rgb, src.rgb) &lt; color_distance(color.rgb, src.rgb) ) {\n            color = pal_color;\n        }\n    }\n\n    return color;\n}\n\n// example usage\nfunc fragment() {\n    COLOR.rgb = find_closest_color(COLOR.rgb);\n}\n</code></pre></p>"},{"location":"gamedev/godot/Palettes%20%26%20Dithering/#palette-blending","title":"Palette Blending","text":"<p>The following additions to the shader allow for blending between two palettes. One palette is used as the \"palette key\" which is used in determining the initial palette color. Then, the UV of the palette color is used to retrieve colors from <code>palette_a</code> and <code>palette_b</code>. The final output color is then determined by a blend of the two colors with <code>palette_mix</code>, <code>0.0</code> corresponding to the color from <code>palette_a</code>, and <code>1.0</code> corresponding to the color from <code>palette_b</code>. <pre><code>uniform sampler2D palette_key;  // an image of 8 colors laid out horizontally\nuniform sampler2D palette_a;\nuniform sampler2D palette_b;\nuniform float palette_mix = 0.0;\nuniform int palette_size = 8;  // the number of colors in the palette\nuniform int palette_mask = 256;  // 0b11111111\n\nvec3 find_closest_color(vec3 src) {\n\n    vec3 color = vec3(-20.0); \n    vec2 uv = vec2(-1.0); // UV of the closest color\n\n    for(int u = 0; u &lt; palette_size; u += 1) {\n        if( bitfieldExtract(palette_mask, int(u), 1) == 0u ) { continue; }\n\n        vec2 pal_uv = vec2(float(u) / float(palette_size), 0.0);\n        vec3 pal_color = texture(palette_key, pal_uv).rgb;\n\n        if( _distance(pal_color.rgb, src.rgb) &lt; _distance(color.rgb, src.rgb) ) {\n            color = pal_color;\n            uv = pal_uv;\n        }\n    }\n\n    vec3 color_a = texture(palette_a, uv).rgb;\n    vec3 color_b = texture(palette_b, uv).rgb;\n    return mix(color_a, color_b, palette_mix);\n}\n\n// example usage\nfunc fragment() {\n    COLOR.rgb = find_closest_color(COLOR.rgb);\n}\n</code></pre></p>"},{"location":"gamedev/godot/Palettes%20%26%20Dithering/#2-colors","title":"2 Colors","text":"<pre><code>struct ColorPairResult {\n    vec3 color_a;\n    vec2 uv_1;\n    vec3 color_b;\n    vec2 uv_2;\n    float dist_1;\n    float dist_12;\n};\n\n/*\n* Test a color against a color palette, and return a result struct containing:\n* - The UV of the closest palette color found\n* - The UV of the 2nd closest palette color found\n* - The color distance between the closest palette color and the tested color\n* - The color distance between the closest palette color and the 2nd closest palette color\n*/\nColorPairResult find_closest_colors(vec3 color) {\n\n    //bool[8] mask = {pal_1, pal_2, pal_3, pal_4, pal_5, pal_6, pal_7, pal_8};\n\n    float max_dist_1 = 10000.0;\n    float max_dist_2 = 10000.0;\n\n    vec2 uv_1 = vec2(-1.0); // UV of the closest color\n    vec2 uv_2 = vec2(-1.0); // UV of the 2nd closest color\n\n    vec3 color_a = vec3(-20, 0, 0);\n    vec3 color_b = vec3(-20, 0, 0);\n\n    for(float u = 0.0; u &lt; float(palette_size); u += 1.0) {\n        if( bitfieldExtract(palette_mask, int(u), 1) == 0u ) { continue; }\n        //if( !mask[int(u)] ) { continue; }\n\n        vec2 pal_uv = vec2(u / float(palette_size), 0.0);\n        vec3 pal_color = texture(PALETTE_KEY, pal_uv).rgb;\n        float dist = _distance(pal_color, color);\n        float closest_dist = _distance(color_a, color);\n\n        if( dist &lt; closest_dist ) {\n\n            max_dist_2 = max_dist_1;\n            uv_2 = uv_1;\n            color_b = color_a;\n\n            max_dist_1 = closest_dist;\n            uv_1 = pal_uv;\n            color_a = pal_color;\n        }\n        else if ( dist &lt; _distance(color_b.rgb, color.rgb) ) {\n\n            max_dist_2 = dist;\n            uv_2 = pal_uv;\n            color_b = pal_color;\n        }\n    }\n\n    ColorPairResult results;\n    results.color_a = color_a; // the closest color\n    results.color_b = color_b; // the second closest color\n    results.uv_1 = uv_1; // UV of the closest color\n    results.uv_2 = uv_2; // UV of the second closest color\n    // distance between the tested color and the closest color\n    results.dist_1 = max_dist_1; \n    // distance between the closest color and second closest color\n    results.dist_12 = _distance(color_a.rgb, color_b.rgb);\n    return results;\n}\n</code></pre>"},{"location":"gamedev/godot/Palettes%20%26%20Dithering/#color-conversions","title":"Color Conversions","text":""},{"location":"gamedev/godot/Palettes%20%26%20Dithering/#rgb-to-cielab","title":"RGB to CIELAB","text":"<pre><code>//\n// Port of https://github.com/antimatter15/rgb-lab/blob/master/color.js#L28-L47\n// Converts an RGB color to CIE L*ab format.\n//\nvec3 rgb_to_lab(vec3 rgb) {\n\u00a0 \u00a0 float r = rgb.r / 255.0, g = rgb.g / 255.0, b = rgb.b / 255.0;\n\u00a0 \u00a0 float x, y, z;\n\n\u00a0 \u00a0 r = (r &gt; 0.04045) ? pow((r + 0.055) / 1.055, 2.4) : r / 12.92;\n\u00a0 \u00a0 g = (g &gt; 0.04045) ? pow((g + 0.055) / 1.055, 2.4) : g / 12.92;\n\u00a0 \u00a0 b = (b &gt; 0.04045) ? pow((b + 0.055) / 1.055, 2.4) : b / 12.92;\n\n\u00a0 \u00a0 x = (r * 0.4124 + g * 0.3576 + b * 0.1805) / 0.95047;\n\u00a0 \u00a0 y = (r * 0.2126 + g * 0.7152 + b * 0.0722) / 1.00000;\n\u00a0 \u00a0 z = (r * 0.0193 + g * 0.1192 + b * 0.9505) / 1.08883;\n\n\u00a0 \u00a0 x = (x &gt; 0.008856) ? pow(x, 1.0/3.0) : (7.787 * x) + 16.0/116.0;\n\u00a0 \u00a0 y = (y &gt; 0.008856) ? pow(y, 1.0/3.0) : (7.787 * y) + 16.0/116.0;\n\u00a0 \u00a0 z = (z &gt; 0.008856) ? pow(z, 1.0/3.0) : (7.787 * z) + 16.0/116.0;\n\n\u00a0 \u00a0 return vec3((116.0 * y) - 16.0, 500.0 * (x - y), 200.0 * (y - z));\n}\n</code></pre>"},{"location":"gamedev/godot/Palettes%20%26%20Dithering/#color-distance","title":"Color Distance","text":""},{"location":"gamedev/godot/Palettes%20%26%20Dithering/#cielab-delta-e-distance","title":"CIELAB Delta E Distance","text":"<pre><code>float distance_lab(vec3 a, vec3 b) {\n    distance(rgb_to_lab(a), rgb_to_lab(b));\n}\n\n//\n// Port of https://github.com/antimatter15/rgb-lab/blob/master/color.js#L52-L68\n// Gets the delta E between two LAB colors.\n//\nfloat distance_lab(vec3 rgb_a, vec3 rgb_b) {\n\n    const float WHT_L = 1.0, WHT_C = 1.0, WHT_H = 1.0;\n\n    vec3 lab1 = rgb_to_lab(rgb_a);\n    vec3 lab2 = rgb_to_lab(rgb_b);\n\n    float xC1 = sqrt( pow(lab1.y, 2.0) + pow(lab1.z, 2.0) );\n    float xC2 = sqrt( pow(lab2.y, 2.0) + pow(lab2.z, 2.0) );\n\n    float xDL = lab2.x - lab1.x;\n    float xDC = xC2 - xC1;\n    float xDE = distance(lab1, lab2);\n\n    float xDH = (xDE * xDE) - (xDL * xDL) - (xDC * xDC);\n    if( xDH &gt; 0.0 ) {\n        xDH = sqrt(xDH);\n    }\n    else {\n        xDH = 0.0;\n    }\n\n    float xSC = 1.0 + 0.045 * xC1;\n    float xSH = 1.0 + 0.015 * xC1;\n\n    xDL /= WHT_L;\n    xDC /= WHT_C * xSC;\n    xDH /= WHT_H * xSH;\n\n    return sqrt(xDL*xDL + xDC*xDC + xDH*xDH);\n}\n</code></pre>"},{"location":"gamedev/godot/Palettes%20%26%20Dithering/#luma-corrected-color-distance","title":"Luma-corrected Color Distance","text":"<pre><code>// https://gist.github.com/yyny/3b54ff26ab4f8fd0aad468dd144191c2\n// Luma-corrected RGB color distance\nfloat distance_luma(vec3 a, vec3 b) {\n    vec3 diff = b - a;\n    float luma1 = (a.x*0.299 + a.y*0.587 + a.z*0.114);\n    float luma2 = (b.x*0.299 + b.y*0.587 + b.z*0.114);\n    float dluma = luma2 - luma1;\n\n    return (sq(diff.x) * 0.299 + sq(diff.y) * 0.587 + sq(diff.z) * 0.114) * sq(dluma) * 0.75;\n}\n</code></pre>"},{"location":"gamedev/godot/Palettes%20%26%20Dithering/#dithering","title":"Dithering","text":""},{"location":"gamedev/godot/Palettes%20%26%20Dithering/#cielab-delta-e","title":"CIELAB Delta E","text":"<pre><code>ColorPairResult res = find_closest_colors(color, palette, palette_size);\nfloat dist_1 = res.dist_1; // dist from pal color to original color\nfloat dist_12 = res.dist_12; // dist from pal color to 2nd closest pal color\nvec2 uv_1 = res.uv_1; // UV of pal color\nvec2 uv_2 = res.uv_2; // UV of 2nd closest pal color\n\nindex_pixel += 0.26; \nfloat diff = dist_1 / dist_12;\n\nvec2 uv;\nif (diff &lt; index_pixel) { uv = uv_1; }\nelse { uv = uv_2; }\n\nreturn get_palette_color_from_uv(uv);\n</code></pre>"},{"location":"gamedev/godot/Palettes%20%26%20Dithering/#bisqwit-based-method","title":"Bisqwit-based Method","text":"<pre><code>ColorResult res = find_closest_color(color.rgb);\nvec3 pal_color = res.color;\n\nif( pal_color != color.rgb ) {\n    //float threshold = 1.0 / sqrt(float(palette_size));\n    color.rgb += vec3((index_pixel - 0.5) * COLOR_DITHER);\n    color = clamp(color, 0.0, 1.0);\n    pal_color = find_closest_color(color.rgb).color;\n}\n\nreturn pal_color;\n</code></pre>"},{"location":"gamedev/godot/Pixelization%20%26%20Low-res%20Rendering/","title":"Pixelization","text":""},{"location":"gamedev/godot/Pixelization%20%26%20Low-res%20Rendering/#method-1-rendering-at-a-low-resolution-then-upscaling","title":"Method 1: Rendering at a Low Resolution then Upscaling","text":"<p>In this method, we display a low-resolution SubViewport and upscale it. This is a slightly more complicated way of achieving a \"pixelization\" effect, but offers a performance advantage over a pixelization post-processing effect, as we will be actually rendering the game at the lower resolution.</p> <p>In this example we will be rendering the game at 640x360 and displaying it at 1920x1080 (3x pixelization). This resolution was chosen since 640x360 cleanly translates to 3x3 pixels on a 1080p screen, and 2x2 pixels on a 720p screen (both common resolutions). </p> <p>Render Resolution = (640, 360) Display Resolution = (1920, 1080)</p>"},{"location":"gamedev/godot/Pixelization%20%26%20Low-res%20Rendering/#project-settings","title":"Project Settings","text":"<p>In your project ensure your display resolution (1920, 1080) is correct. This is in <code>Display &gt; Window &gt; Viewport Width/Height</code> in your Project Settings.</p> <p></p>"},{"location":"gamedev/godot/Pixelization%20%26%20Low-res%20Rendering/#display-scene","title":"Display Scene","text":"<p>Create the scene with a Node2D as your root node, then add a SubViewportContainer and a SubViewport. The SubViewport will contain your actual in-game world.</p> <p></p> <p>For the SubViewportContainer, set the scale in the inspector (<code>Layout &gt; Transform &gt; Scale</code>) to (3, 3).</p> <p></p> <p>Also, set the texture filter to Nearest (<code>CanvasItem &gt; Texture &gt; Filter</code>). This will create a sharp image when upscaling.</p> <p></p> <p>For the SubViewport, set the size in the inspector (<code>SubViewport &gt; Size</code>) to your render resolution (640, 360).</p> <p></p> <p>Save the scene with your preferred name. For this example we will save it as <code>display.tscn</code>.</p>"},{"location":"gamedev/godot/Pixelization%20%26%20Low-res%20Rendering/#renderworld-scene","title":"Render/World Scene","text":"<p>Create a second scene, using a Node2D as the root node again. This scene will contain the nodes you need to build your actual game world.</p> <p></p> <p>Save the scene as is. For this example we will save it as <code>world.tscn</code>.</p> <p>In your display scene, drag the <code>world.tscn</code> scene we just created into the SubViewport node.</p> <p></p> <p>At this point the setup is done. Add whatever nodes that need to be rendered low-res into your <code>world.tscn</code>. Keep in mind that since you're working with a lower resolution, things will look small in the editor. (The 2D editor uses pixels as its units of distance)</p>"},{"location":"gamedev/godot/Pixelization%20%26%20Low-res%20Rendering/#tip-use-guides-to-show-screen-size","title":"Tip: Use Guides to Show Screen Size","text":"<p>It may be helpful to see what the size of one full screen in our world scene looks like. The default viewport guides aren't accurate here anymore since we're working with a lower resolution. Create guides by clicking and holding the editor ruler and dragging out. Create horizontal guides lining up at 0px and 640px and vertical guides lining up at 0px and 360px.</p> <p></p>"},{"location":"gamedev/godot/Pixelization%20%26%20Low-res%20Rendering/#example-use","title":"Example Use","text":"<p>To show an example of what the world scene looks like upscaled, we will add the default icon sprite, tiled using a TextureRect.</p> <p></p> <p>After saving <code>world.tscn</code>, this is what is shown in <code>display.tscn</code>.</p> <p></p>"},{"location":"gamedev/godot/gamedocs/bulletlab/","title":"Bulletlab","text":"<p>BULLETLAB is a bullet-hell game and tool for designing shmup patterns. Inspired by BulletML.</p>"},{"location":"gamedev/godot/gamedocs/bulletlab/#reference","title":"Reference","text":"<p>BULLETLAB parses bullet patterns using a JSON file.</p> <p>Most objects read by the parser are in the form of a JSON object with a single key, with the key identifying the type of object. For example, Patterns are in the form <code>{\"pattern\": { ... }}</code>.</p>"},{"location":"gamedev/godot/gamedocs/bulletlab/#patterns","title":"Patterns","text":"<p>Patterns describe the actions of either a top-level entity (such as an enemy ship) or a bullet.</p> <pre><code>{\"pattern\": {\n    \"id\": &lt; string &gt;,\n    \"repeat\": &lt; int | expr &gt;,\n    \"do\": [ ... ]\n}}\n</code></pre> Key Default Value Description <code>id</code> <code>\"_\"</code> The identifier of the pattern. Other patterns or bullets can refer to this pattern by identifier later in the file. <code>repeat</code> <code>1</code> The number of times to repeat the list of actions. <code>do</code> <code>[]</code> A list of action objects to perform. <p>Node that all of the actions in the pattern will be performed per frame (including repeats) unless there is a <code>Wait</code> action. Keep this in mind when creating a pattern with large amounts of actions.</p>"},{"location":"gamedev/godot/gamedocs/bulletlab/#examples","title":"Examples","text":"<pre><code>// Example: Fires 3 bullets downward in a spread pattern\n{\"pattern\": {\n    \"id\": \"3-round-spread\",\n    \"do\": [\n        {\"fire\": {\"angle\": 0}},\n        {\"fire\": {\"angle\": 5}},\n        {\"fire\": {\"angle\": -5}},\n    ]\n}}\n</code></pre>"},{"location":"gamedev/godot/gamedocs/bulletlab/#expressions","title":"Expressions","text":"<p>Most numerical parameters for pattern actions can be replaced with a Godot Expression. This allows users to describe values as a math expression, as well as allowing access to most math functions in Godot (such as <code>randf()</code>). For some actions, additional variables are also given to use in the expression.</p>"},{"location":"gamedev/godot/gamedocs/bulletlab/#speed-variables","title":"Speed Variables","text":"<p>These variables are provided to actions with a  <code>speed</code> parameter, if using an expression.</p> Variable Description <code>LAST</code> The speed of the last bullet this pattern has fired (starting from <code>0</code>)."},{"location":"gamedev/godot/gamedocs/bulletlab/#angle-variables","title":"Angle Variables","text":"<p>These variables are provided to actions with an <code>angle</code> parameter, if using an expression.</p> Variable Description <code>SHIP</code> The angle to the player's ship. <code>LAST</code> The angle of the last bullet this pattern as fired (starting from <code>0</code>)."},{"location":"gamedev/godot/gamedocs/bulletlab/#relative-vs-absolute","title":"Relative vs. Absolute","text":"<p>Expressions can be defined as relative or absolute by adding <code>rel;</code> or <code>abs;</code> to the beginning of the expression. All speed and angle parameters are relative by default if not specified.</p> <p>If the parent to the pattern with this action is a Pattern, relative parameters are relative to the last bullet fired by the parent. If the parent to the pattern with this action is a Bullet, relative parameters are relative to that parent bullet.</p>"},{"location":"gamedev/godot/gamedocs/bulletlab/#actions","title":"Actions","text":""},{"location":"gamedev/godot/gamedocs/bulletlab/#wait","title":"Wait","text":"<p>Wait for a specified amount of frames.</p> <pre><code>{\"wait\": &lt; int | expr &gt;}\n</code></pre>"},{"location":"gamedev/godot/gamedocs/bulletlab/#examples_1","title":"Examples","text":"<pre><code>// Waits for 5 frames\n{\"wait\": 5}\n\n// Waits for a random amount between 1 and 5 frames\n{\"wait\": \"randf() * 4 + 1\"}\n\n// A pattern firing a 3-round burst of bullets at the player\n{\"pattern\": {\n    \"id\": \"3-round-burst\",\n    \"do\": [\n        {\"fire\": {\"angle\": \"SHIP\"}},\n        {\"wait\": 5},\n        {\"fire\": {\"angle\": \"SHIP\"}},\n        {\"wait\": 5},\n        {\"fire\": {\"angle\": \"SHIP\"}}\n    ]\n}}\n</code></pre>"},{"location":"gamedev/godot/gamedocs/bulletlab/#fire","title":"Fire","text":"<p>Fires a bullet. This will also set the <code>LAST</code> variable in future Fire actions to allow for sequential patterns.</p> <pre><code>{\"fire\": {\n    \"speed\": &lt; float | expr &gt;,\n    \"angle\": &lt; float | expr &gt;,\n    \"pattern\": &lt; Pattern | string &gt;\n}}\n</code></pre>"},{"location":"gamedev/godot/gamedocs/bulletlab/#parameters","title":"Parameters","text":"Key Default Value Description <code>speed</code> <code>1</code> The speed of the bullet (in pixels per frame). <code>angle</code> <code>0</code> The angle or direction of the bullet (in degrees). <code>0</code> degrees is down. <code>pattern</code> <code>none</code> A pattern to run as a subpattern of this bullet. Either a Pattern object or identifier of a previously defined Pattern."},{"location":"gamedev/godot/gamedocs/bulletlab/#examples_2","title":"Examples","text":"<pre><code>// Fires a fast bullet at the player\n{\"fire\": {\"speed\": 5, \"angle\": \"SHIP\"}}\n\n// Fires a bullet that fires fast bullets at the player every 0.5 seconds\n{\"fire\": {\"angle\": \"60\", \"pattern\": {\n    \"do\": [\n        {\"wait\": 30},\n        {\"fire\": {\"speed\": \"abs; 5\", \"angle\": \"SHIP\"}}\n    ]\n}}}\n\n// Fires 36 bullets in a circle pattern\n{\"fire\": {\"speed\": 1, \"pattern\": {\n    \"repeat\": 35,\n    \"do\": [\n        {\"fire\": {\"angle\": \"LAST + 10\"}}\n    ]\n}}}\n</code></pre>"},{"location":"gamedev/godot/gamedocs/bulletlab/#speed","title":"Speed","text":"<p>Sets the speed of a parent bullet. If the parent is a Pattern, this action does nothing.</p> <pre><code>// sets the speed over time\n{\"speed\": {\"to\": &lt; float | expr &gt;, \"in\": &lt; float | expr &gt;, \"curve\": &lt; float | expr &gt;}}\n\n// sets the speed instantly (equivalent to {\"to\": &lt; float | expr &gt;, \"in\": 0, \"curve\": 1.0})\n{\"speed\": &lt; float | expr &gt;}\n</code></pre>"},{"location":"gamedev/godot/gamedocs/bulletlab/#parameters_1","title":"Parameters","text":"Key Default Value Description <code>to</code> required The target speed to set to. <code>in</code> <code>0</code> The amount of frames to interpolate the speed to the target speed. If 0, sets the speed immediately. <code>curve</code> <code>1.0</code> The curve to use for the interpolation. A value of 1.0 is linear. Uses the <code>ease()</code> function in Godot, see this image for a visual of different curves."},{"location":"gamedev/godot/gamedocs/bulletlab/#angle","title":"Angle","text":"<p>Sets the angle of a parent bullet. If the parent is a Pattern, this action does nothing.</p> <pre><code>// sets the angle over time\n{\"angle\": {\"to\": &lt; float | expr &gt;, \"in\": &lt; float | expr &gt;, \"curve\": &lt; float | expr &gt;}}\n\n// sets the angle instantly (equivalent to {\"to\": &lt; float | expr &gt;, \"in\": 0, \"curve\": 1.0})\n{\"angle\": &lt; float | expr &gt;}\n</code></pre>"},{"location":"gamedev/godot/gamedocs/bulletlab/#parameters_2","title":"Parameters","text":"Key Default Value Description <code>to</code> required The target angle to set to. <code>in</code> <code>0</code> The amount of frames to interpolate the angle to the target angle. If 0, sets the angle immediately. <code>curve</code> <code>1.0</code> The curve to use for the interpolation. A value of 1.0 is linear. Uses the ease() function in Godot, see this image for a visual of different curves."},{"location":"gamedev/godot/gamedocs/bulletlab/#subpattern","title":"Subpattern","text":"<p>Adds another pattern to be run alongside the pattern this action is in. Note that the pattern will not wait until the subpattern is finished. All subpatterns run in parallel to the parent pattern.</p> <pre><code>{\"pattern\": &lt; Pattern | string &gt;}\n</code></pre> <p>Uses the same syntax as a normal pattern if an object is provided (see: #Patterns). If a string is provided, uses a previously defined Pattern by identifier.</p>"},{"location":"gamedev/godot/gamedocs/bulletlab/#examples_3","title":"Examples","text":"<pre><code>// Fire a series of circle patterns\n[\n    {\"pattern\": {\n        \"id\": \"circle\",\n        \"repeat\": 36,\n        \"do\": [\n            {\"fire\": {\"angle\": \"LAST + 10\"}}\n        ]\n    }},\n\n    {\"pattern\": {\n        \"repeat\": 10,\n        \"do\": [\n            {\"pattern\": \"circle\"},\n            {\"wait\": 30}\n        ]\n    }}\n]\n</code></pre>"},{"location":"gamedev/godot/guides/Creating%20an%20FPS%20Controller/","title":"Creating a 3D FPS Player Controller","text":"<p>This is a guide on how to create an FPS player controller from scratch in Godot 4.0. This controller will feature:</p> <ul> <li>A first-person camera that is controlled by the mouse</li> <li>Walking and strafing with the WASD keys</li> <li>Jumping with the Spacebar</li> <li>Accurate collision with floors, walls, and ramps in the world (stairs TBD)</li> </ul> <p>We will be implementing Quake-style movement physics in this controller.</p>"},{"location":"gamedev/godot/guides/Creating%20an%20FPS%20Controller/#input-mapping-setup","title":"Input Mapping Setup","text":""},{"location":"gamedev/godot/guides/Creating%20an%20FPS%20Controller/#creating-the-main-scene","title":"Creating the Main Scene","text":"<p>The main scene will contain some basic world geometry for our player to move around in. We'll be working on this first to give our player controller an area to continually test in.</p>"},{"location":"gamedev/godot/guides/Creating%20an%20FPS%20Controller/#creating-the","title":"Creating the","text":"<pre><code>extends CharacterBody3D\n\n#var velocity = Vector3.ZERO\n\nvar MAX_AIR_SPEED = 2\nvar MAX_GROUND_SPEED = 16\nvar MAX_ACCEL = 10 * MAX_GROUND_SPEED\nvar MAX_AIR_ACCEL = 100\nconst FRICTION = 6\nconst CROUCH_FRICTION = 2\nconst STOP_SPEED = 2\n\nvar total_pitch = 0.0  # reference to current pitch\nvar total_yaw = 0.0\n\nvar wishdir = Vector3.ZERO        # player's intended movement direction\n\nvar ticks_grounded = 0  # number of ticks this player was on the floor\n\n@onready\nvar crouch_tween = create_tween()\n\n@onready\nvar looktween = create_tween()\n\nfunc right():\n    Vector3.RIGHT.rotated(Vector3.UP, $camera.rotation.y).normalized()\n\nfunc _ready():\n    Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)\n\nfunc _input(event):\n    if event is InputEventMouseMotion:\n        # update camera\n        var yaw = event.relative.x * -0.002\n        var pitch = event.relative.y * -0.002\n\n        pitch = clamp(pitch, -(PI/2) - total_pitch, (PI/2) - total_pitch)\n        total_pitch += pitch\n        total_yaw += yaw\n\n        $look.rotation.y += yaw\n        $look.rotate($look.transform.basis.x, pitch)\n\nfunc get_yaw():\n    return rotation.y\n\nfunc fix_angle():\n    pass\n    #$look.rotate_y(rotation.y)\n    #rotation.y = 0\n    #rotation.z = 0\n    #rotation.x = 0\n    #total_pitch = $camera.rotation.x\n\nfunc _process(_delta):\n\n    # viewmodel angle smoothing\n    var a = $viewmodel.transform.basis.get_rotation_quaternion()\n    var b = $camera.transform.basis.get_rotation_quaternion()\n    $viewmodel.transform.basis = Basis(a.slerp(b, 0.2))\n\n    wishdir = Vector3.ZERO\n\n    if Input.is_action_pressed(\"move_forward\"):\n        wishdir += Vector3.FORWARD\n\n    if Input.is_action_pressed(\"move_back\"):\n        wishdir += Vector3.BACK\n\n    if Input.is_action_pressed(\"move_left\"):\n        wishdir += Vector3.LEFT\n\n    if Input.is_action_pressed(\"move_right\"):\n        wishdir += Vector3.RIGHT\n\n    if wishdir != Vector3.ZERO:\n        wishdir = wishdir.rotated(Vector3.UP, $camera.rotation.y).normalized()\n        wishdir.y = 0\n\n    if Input.is_action_just_pressed(\"quit\"):\n        get_tree().quit()\n\nfunc get_speed() -&gt; float:\n    return Vector2(velocity.x, velocity.z).length()\n\nfunc friction(delta):\n    var friction\n    if Input.is_action_pressed(\"crouch\"):\n        friction = CROUCH_FRICTION\n    else:\n        friction = FRICTION\n\n    var speed = get_speed()\n    if speed &lt; STOP_SPEED: speed = STOP_SPEED\n\n    var new_speed = speed - (speed * friction * delta)\n    if new_speed &lt; 0: new_speed = 0\n\n    velocity = velocity * (new_speed / speed)\n\n# Q2/3 style movement    \nfunc accelerate(wishdir: Vector3, delta: float):\n\n    var wishspeed\n    var accel\n\n    if is_on_floor():\n        if not Input.is_action_pressed(\"jump\"):\n            friction(delta)\n        wishspeed = MAX_GROUND_SPEED\n        accel = MAX_ACCEL\n    else:\n        wishspeed = MAX_AIR_SPEED\n        accel = MAX_AIR_ACCEL\n\n    var currentspeed = velocity.dot(wishdir)\n    var addspeed = clamp(wishspeed - currentspeed, 0, accel * delta)\n\n    velocity += addspeed * wishdir\n\n\n# get the player's intended camera angle\nfunc get_wishlook() -&gt; Basis:\n    if not tether:\n        return $look.transform.basis.orthonormalized()\n    else:\n        var rail_rotation = tether.get_follow_angle()\n        var wishang = tether.follow.transform.basis.orthonormalized()\n        wishang = wishang.rotated(wishang.y, total_yaw -rail_rotation.y)\n        wishang = wishang.rotated(wishang.x, total_pitch -rail_rotation.x)\n        return wishang\n\n\nfunc _physics_process(delta):\n\n    var wishang = $look.transform.basis.orthonormalized()\n\n    if Input.is_action_pressed(\"crouch\"):\n        crouch_tween.stop()\n        crouch_tween.tween_property($look, \"position:y\", 0.7, 0.1)\n        crouch_tween.play()\n    else:\n        crouch_tween.stop()\n        crouch_tween.tween_property($look, \"position:y\", 2.0, 0.1)\n        crouch_tween.play()\n\n    # camera tilt\n    var local = $look.to_local(position + velocity)\n    wishang = wishang.rotated(wishang.z, -local.x * 0.002)\n\n    if not is_on_floor():\n        velocity.y -= 25 * delta\n\n    elif is_on_floor():\n        if Input.is_action_pressed(\"jump\"):\n            floor_snap_length = 0.0\n            var norm = $camera/down.get_collision_normal()\n            velocity += norm * Vector3(0, 10, 0).dot(norm)\n            velocity.y = max(velocity.y, 10)\n        else:\n            velocity.y = -0.5\n\n    var camera_smoothing = 0.1\n\n    if tether:\n        var rail_rotation = tether.get_follow_angle()\n        wishang = tether.follow.transform.basis.orthonormalized()\n        wishang = wishang.rotated(wishang.y, total_yaw -rail_rotation.y)\n        wishang = wishang.rotated(wishang.x, total_pitch -rail_rotation.x)\n        camera_smoothing = 0.1\n        #wishang *= Quat(Vector3.UP, total_yaw)\n        #wishang *= Quat(Vector3.RIGHT, total_pitch)\n\n    if not tether:\n        accelerate(wishdir, delta)         \n        move_and_slide()\n\n\n    $camera.transform.basis = wishang\n</code></pre>"},{"location":"linux/Autostarting%20Programs/","title":"Autostarting Programs","text":"<p>Programs can be automatically started by running them in the following scripts:</p> <p><code>~/.xinitrc</code> - run when the xserver starts <code>~/.config/autostart/</code> or <code>etc/xdg/autostart/</code> - contains .desktop files that run when certain desktop environments or window managers start</p>"},{"location":"linux/Common%20Issues/","title":"Common Issues","text":""},{"location":"linux/Common%20Issues/#boot-startup","title":"Boot / Startup","text":""},{"location":"linux/Common%20Issues/#changing-grub-kernal-boot-parameters","title":"Changing GRUB kernal boot parameters","text":"<pre><code>sudo gedit /etc/default/grub\nsudo upgrade-grub\n</code></pre>"},{"location":"linux/Common%20Issues/#terminal-setup","title":"Terminal setup","text":""},{"location":"linux/Common%20Issues/#fix-tty-screen-resolution","title":"Fix TTY Screen Resolution","text":"<p>Install <code>fbset</code>.</p> <p><code>fbset -G &lt;width&gt; &lt;height&gt; &lt;x&gt; &lt;y&gt; 32</code></p>"},{"location":"linux/Common%20Issues/#temporarily-change-tty-font","title":"Temporarily Change TTY Font","text":"<p><code>setfont /usr/share/kbd/consolefonts/drdos8x16.psfu.gz</code></p>"},{"location":"linux/Common%20Issues/#graphics-setup","title":"Graphics setup","text":""},{"location":"linux/Common%20Issues/#disabling-nouveau-default-nvidia-driver","title":"Disabling Nouveau (default NVIDIA driver)","text":"<p>This is necessary when installing the official NVIDIA graphic drivers.</p> <p>Add the parameters <code>nomodeset</code> <code>nouveau.modeset=0</code> to the GRUB kernal boot parameters.</p>"},{"location":"linux/Common%20Issues/#nvidia-module-unable-to-start-after-updating-linux-kernel","title":"NVIDIA module unable to start after updating Linux kernel","text":"<p>The NVIDIA module not starting can lead to being stuck in the terminal, the display manager not starting, and <code>startx</code> not finding any screens.</p> <p>This may be caused by the NVIDIA module being in the modules folder for the old Linux version. Try to start the module manually: <pre><code>$ modprobe nvidia\n</code></pre> This will fail if it cannot find the module in the correct module folder.</p> <p>You can try installing <code>nvidia-dkms</code> (replaces <code>nvidia</code>), which will compile the modules for you in the correct folder: <pre><code>$ sudo pacman -S nvidia-dkms\n</code></pre></p>"},{"location":"linux/Common%20Issues/#package-management","title":"Package management","text":""},{"location":"linux/Common%20Issues/#deleting-orphaned-packages","title":"Deleting orphaned packages","text":"<pre><code>sudo pacman -Rns $(pacman -Qtdq)\n</code></pre> <p><code>pacman -Qt</code> queries all packages that are not required by any other package. The <code>d</code> flag filters it to only packages installed as dependencies. The <code>q</code> flag outputs simpler text (to send to <code>pacman -Rns</code>).</p>"},{"location":"linux/Common%20Issues/#invalid-or-corrupted-package-or-other-pgp-issues","title":"<code>invalid or corrupted package</code> or other PGP issues","text":"<p>Try each of these steps in order to see if they fix the error:</p> <ol> <li>If system time is not synced, manually sync it: <pre><code>$ ntpd -qg\n$ hwclock -w\n</code></pre></li> <li>Update the <code>archlinux-keyring</code> package: <pre><code>$ sudo pacman -Sy archlinux-keyring\n</code></pre></li> <li>Refresh keys: <pre><code>$ sudo pacman-key --refresh-keys\n</code></pre></li> <li>Resetting all installed keys: <pre><code>$ sudo rm -rf /etc/pacman.d/gnupg/\n$ sudo pacman-key --init\n$ sudo pacman-key --populate\n</code></pre></li> <li>Manually add the key: <pre><code>$ sudo pacman-key --recv-keys &lt;keyid&gt;\n$ sudo pacman-key --finger &lt;keyid&gt;\n$ sudo pacman-key --lsign-key &lt;keyid&gt;\n</code></pre></li> </ol>"},{"location":"linux/Common%20Issues/#storage-partition-setup","title":"Storage partition setup","text":""},{"location":"linux/Common%20Issues/#finding-the-uuid-of-a-partition","title":"Finding the UUID of a partition","text":"<pre><code>sudo blkid /dev/&lt;part&gt;\n</code></pre>"},{"location":"linux/Common%20Issues/#mounting-ntfs-partitions","title":"Mounting NTFS partitions","text":"<p>Type: <code>ntfs-3g</code> Options: <code>defaults,exec,nls=utf8,umask=000,uid=1000,guid=1000</code></p> <p>This will mount the NTFS partition with RWX permissions.</p> <p>May need to turn off hibernation and fast boot on Windows before doing this.</p>"},{"location":"linux/Common%20Issues/#auto-mounting-drives","title":"Auto-mounting drives","text":"<p>Goes into the <code>/etc/fstab</code> file.</p> <p>Use the UUID instead of the <code>/dev/&lt;part&gt;</code> name since partition IDs may change.</p>"},{"location":"linux/Common%20Issues/#xorg-setup","title":"Xorg setup","text":""},{"location":"linux/Common%20Issues/#overriding-the-xinitrc-file-that-is-used-when-running-startx","title":"Overriding the .xinitrc file that is used when running <code>startx</code>","text":"<pre><code>startx ./&lt;config&gt;\n</code></pre> <p>The <code>./</code> before the path is important. <code>startx</code> won't recognize it otherwise.</p>"},{"location":"linux/Common%20Issues/#starting-an-xserver-under-a-different-display-id","title":"Starting an Xserver under a different display ID","text":"<pre><code>startx -- :&lt;id&gt;\n</code></pre> <p>With a custom config:</p> <pre><code>startx ./&lt;config&gt; -- :&lt;id&gt;\n</code></pre>"},{"location":"linux/Common%20Issues/#finding-the-ids-of-all-connected-monitors","title":"Finding the IDs of all connected monitors","text":"<pre><code>xrandr --query\n</code></pre>"},{"location":"linux/Common%20Issues/#playing-windows-games","title":"Playing Windows games","text":"<p>On Steam: Steam will attempt to play it with its built-in Proton dist.</p> <p>Not on Steam: Use <code>lutris</code>.</p> <p>Ricing</p>"},{"location":"linux/Common%20Issues/#music-production","title":"Music production","text":""},{"location":"linux/Common%20Issues/#native-daw-options","title":"Native DAW options","text":"<ul> <li>Bitwig Studio</li> <li>Reaper</li> </ul>"},{"location":"linux/Common%20Issues/#mounting-installing-native-instrument-isos","title":"Mounting &amp; installing Native Instrument .isos","text":"<p>Installing products through Native Access (in Wine) will fail if it downloads an .iso and has to mount it (the mount program doesn't work in Wine). In this case, mount the .iso manually and install it.</p> <pre><code>sudo mount -t udf -o unhide &lt;iso&gt; &lt;mount point&gt;\n</code></pre> <p>Afterwards, execute the installer exe within to install it.</p>"},{"location":"linux/Common%20Issues/#bridging-dll-vst-plugins","title":"Bridging .dll VST plugins","text":"<p>Options - linvst - airwave - carla (and carla-bridges-win)</p> <p><code>linvst</code> seems to produce the best results.</p> <pre><code>linvstconvert-cli -i &lt;vst dir&gt;\n</code></pre> <p>Guitar Rig 5 does not work currently. Thankfully Bitwig Studio has its own amp plugin.</p>"},{"location":"linux/Common%20Issues/#adobe-creative-cloud","title":"Adobe Creative Cloud","text":""},{"location":"linux/Dotfiles/","title":"Dotfiles","text":""},{"location":"linux/Dotfiles/#syncing-dotfiles","title":"Syncing dotfiles","text":"<p>Setting up synchronized dotfiles:</p> <p><code>$ git init --bare $HOME/.dotfiles  $ alias dotfiles='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'  $ dotfiles config status.showUntrackedFiles no</code></p>"},{"location":"linux/Gaming/","title":"Gaming","text":""},{"location":"linux/Gaming/#issues","title":"Issues","text":""},{"location":"linux/Gaming/#ntfs-drives","title":"NTFS Drives","text":"<p>Steam games installed on NTFS drives (drives formatted by Windows) may not start when playing on Linux. These drives need to be mounted with the filesystem type <code>ntfs-3g</code>. </p> <p>Example entry in <code>/etc/fstab</code>: <pre><code># &lt;file system&gt; &lt;dir&gt; &lt;type&gt; &lt;options&gt; &lt;dump&gt; &lt;pass&gt;\n/dev/nvme0n1p3 /run/media/octopod/cube ntfs-3g umask=0077,gid=1000,uid=1000 0 1\n</code></pre> See: Storage Drives#Listing Drives</p>"},{"location":"linux/Gaming/#async-shader-compiling","title":"Async Shader Compiling","text":"<p>DXVK (the DirectX to Vulkan API conversion driver) can cause games to stutter as the shaders need to be compiled. This can be done asynchronously using this DXVK async patch: https://github.com/Sporif/dxvk-async</p> <p>Instructions: 1. Download the pre-patched DXVK binaries from here. 2. Run the included script. This will replace the binaries in the current WINE installation, backing up the old versions. <pre><code>$ setup_dxvk.sh --install\n</code></pre> 3. Set the environment variable <code>DXVK_ASYNC</code> to <code>1</code>. <pre><code>$ export DXVK_ASYNC=1\n</code></pre></p> <p>Games may have graphical errors as they won't draw things if the shader for them hasn't been compiled yet.</p>"},{"location":"linux/Packages/","title":"Packages","text":""},{"location":"linux/Packages/#arch-linux-packages","title":"Arch Linux Packages","text":""},{"location":"linux/Packages/#installing-packages","title":"Installing Packages","text":"<pre><code># Installing a package\n$ sudo pacman -S &lt;package&gt;\n\n# Removing a package\n$ sudo pacman -R &lt;package&gt;\n\n# Listing dependencies and other information about a package (query &amp; print info):\n$ sudo pacman -Qi &lt;package&gt;\n\n# Synchronize repositories:\n$ sudo pacman -Sy\n\n# Full system upgrade (sync repositories, update the keyring, then updates all packages):\n$ sudo pacman -Sy archlinux-keyring &amp; pacman -Su\n\n# Remove orphaned packages (packages no longer required by any other package):\n$ sudo pacman -Rns $(pacman -Qtdq)\n</code></pre>"},{"location":"linux/Packages/#installing-aur-community-packages","title":"Installing AUR (Community) Packages","text":"<p>Manually:</p> <pre><code>$ git clone https://aur.archlinux.org/&lt;package&gt;.git\n$ cd &lt;package&gt;\n$ mkpkg -si\n</code></pre> <p>Using a AUR helper (<code>yay</code>): <pre><code># install yay manually\n$ git clone https://aur.archlinux.org/yay.git\n$ cd yay\n$ mkpkg -si\n\n# or use this one-liner\n$ cd /tmp &amp;&amp; git clone 'https://aur.archlinux.org/yay.git' &amp;&amp; cd /tmp/yay &amp;&amp; makepkg -si &amp;&amp; cd ~ &amp;&amp; rm -rf /tmp/yay/\n\n# installing a package\n$ yay -S &lt;package&gt;\n</code></pre></p>"},{"location":"linux/Packages/#yay-installupdate-one-liner","title":"<code>Yay</code> Install/Update One-liner","text":"<pre><code>cd /tmp &amp;&amp; git clone 'https://aur.archlinux.org/yay.git' &amp;&amp; cd /tmp/yay &amp;&amp; makepkg -si &amp;&amp; cd ~ &amp;&amp; rm -rf /tmp/yay/\n</code></pre>"},{"location":"linux/Packages/#sudo","title":"Sudo","text":"<p><code>sudo</code></p> <p>Must add user to <code>sudo</code> group and edit <code>etc/sudoers</code> to allow users in the <code>sudo</code> group.</p>"},{"location":"linux/Packages/#text-editors","title":"Text Editors","text":""},{"location":"linux/Packages/#neovim","title":"Neovim","text":"<p><code>pacman -S neovim python-neovim</code></p>"},{"location":"linux/Packages/#clipboard-support","title":"Clipboard Support","text":"<p><code>xclip</code> for X11 <code>wl-clipboard</code> for Wayland</p>"},{"location":"linux/Packages/#programming-languages","title":"Programming Languages","text":""},{"location":"linux/Packages/#python","title":"Python","text":"<p><code>pacman -S python3</code></p>"},{"location":"linux/Packages/#bluetooth-support","title":"Bluetooth Support","text":"<p><code>bluez bluez-utils</code></p> <pre><code># sudo systemctl enable bluetooth.service\n# sudo systemctl start bluetooth.service\n</code></pre> <p>If using KDE, it comes with its own Bluetooth frontend.</p>"},{"location":"linux/Packages/#desktop-environments-de","title":"Desktop Environments (DE)","text":"<p>Desktop environments are usually an all-in-one package of window manager (WM), compositor, and/or a full program suite including a settings GUI and default apps.</p>"},{"location":"linux/Packages/#plasma","title":"Plasma","text":"<p><code>plasma</code></p> <p>X11</p> <p><code>xorg-xinit xorg-server</code></p>"},{"location":"linux/Packages/#display-manager-dm","title":"Display Manager (DM)","text":"<p>Display managers (or login managers) automatically starts a GUI at the end of the boot process.</p>"},{"location":"linux/Packages/#no-dm","title":"No DM","text":"<p><code>pacman -S xorg-xinit xorg-server</code> Without a display manager, the GUI would need to be entered through the terminal. This can be done by running <code>startx</code> . This will source a file named <code>~/.xinitrc</code>, which should contain the commands needed to start your DE or WM, as well as any default apps.</p> <p>To open Plasma when running <code>startx</code> (provided by <code>xorg-xinit</code>), add these lines to a file named <code>~/.xinitrc</code>.</p> <p><pre><code>~/.xinitrc\n</code></pre> <pre><code>export DESKTOP_SESSION=plasma\nexec startplasma-x11\n</code></pre></p>"},{"location":"linux/Packages/#lightdm","title":"LightDM","text":"<p><code>pacman -S lightdm</code> A simple, lightweight display manager. Usually requires a greeter, which provides a login screen.</p>"},{"location":"linux/Packages/#file-explorers","title":"File Explorers","text":""},{"location":"linux/Packages/#thunar","title":"Thunar","text":"<p><code>pacman -S thunar</code></p>"},{"location":"linux/Packages/#additional-packages","title":"Additional Packages","text":"<p><code>tumbler</code>: thumbnail support <code>ffmpegthumbnailer</code>: video thumbnail support <code>thunar-volman</code>: removable device management <code>gvfs</code>: trash support, mounting with udisk and remote filesystems</p>"},{"location":"linux/Ricing/","title":"Ricing","text":"<p>The term ricing originates from the term RICE in cars (Race Inspired Cosmetic Enhancement). Ricing in Linux represents the practice of customizing your desktop UI, usually with no performance benefit.</p>"},{"location":"linux/Ricing/#display-manager-dm","title":"Display Manager (DM)","text":"<p>Provides a login screen and can automatically start the GUI on boot.</p>"},{"location":"linux/Ricing/#lightdm-lightdm","title":"LightDM (<code>lightdm</code>)","text":""},{"location":"linux/Ricing/#window-manager-wm","title":"Window Manager (WM)","text":"<p>Controls the placement and appearance of windows within a desktop.</p> <p>Types: -   stacking/floating - Windows-like behavior -   tiling - tiles the windows so that none are overlapping; can rely heavily on keyboard bindings -   dynamic - can switch between stacking and tiling</p>"},{"location":"linux/Ricing/#openbox-openbox","title":"Openbox (<code>openbox</code>)","text":"<p>A WM with a customizable appearance and icons (limited to pixel icons).</p> <p>GUI config - install ObConf (<code>obconf</code>)</p>"},{"location":"linux/Ricing/#terminal-emulator","title":"Terminal Emulator","text":"<p>Some terminal emulators allow extensive customization.</p>"},{"location":"linux/Ricing/#termite-termite","title":"Termite (<code>termite</code>)","text":"<p>This terminal emulator supports custom line heights and window padding.</p>"},{"location":"linux/Ricing/#automatic-palettes","title":"Automatic Palettes","text":"<p>Install Wal (<code>pywal</code>). Generates color palettes based on a wallpaper that can be used in the terminal and various other apps.</p> <p>Commonly used like:</p> <pre><code>wal -i &lt;image&gt;\n</code></pre> <p>Use the <code>-n</code> flag to prevent it from setting the wallpaper.</p> <p>Different backends can be used to vary your results. List them with:</p> <pre><code>wal --backend\n</code></pre> <p>And set it when running like:</p> <pre><code>wall -i &lt;image&gt; --backend &lt;backend&gt;\n</code></pre> <p>Note that these backends must also be installed.</p>"},{"location":"linux/Ricing/#fine-tuning-color-palettes","title":"Fine-tuning color palettes","text":"<p>Install the <code>wpgtk</code> package to adjust the colors of a palette generated by <code>wal</code>. Install the <code>gpick</code> package for a screen color picker.</p>"},{"location":"linux/Ricing/#wallpaper-manager","title":"Wallpaper Manager","text":"<p>Manages custom wallpapers.</p>"},{"location":"linux/Ricing/#feh-feh","title":"feh (<code>feh</code>)","text":"<p>Commonly used like:</p> <pre><code>feh --bg-fill &lt;image&gt;\n</code></pre> <p>or with multiple monitors:</p> <pre><code>feh --bg-fill &lt;image 1&gt; --bg-fill &lt;image 2&gt;\n</code></pre> <p>Wallpapers that span multiple monitors must be split up before being used as wallpapers for each monitor.</p>"},{"location":"linux/Ricing/#compositors","title":"Compositors","text":"<p>Compositors can enhance the visuals of any desktop windows or panels.</p>"},{"location":"linux/Ricing/#picom-ibhagwan-fork","title":"Picom (ibhagwan fork)","text":"<p>Features: -   transparency -   blur -   rounded corners</p> <p>https://github.com/ibhagwan/picom</p> <p>Must be installed from the AUR or built from source (follow the instructions at the page).</p> <p>Relevant new options (found in <code>~/.config/picom.conf</code>):</p> <pre><code>corner-radius = 10.0;\nround-borders = 1;\n\nblur: {\n    method = \"dual_kawase\";\n    strength = 5;\n};\n</code></pre>"},{"location":"linux/Ricing/#status-bars","title":"Status bars","text":"<p>Status bars are panels that can display: -   the clock -   any important system information (RAM, CPU, disk usage, etc.) -   the list of open windows -   shortcuts to common programs</p> <p>This is similar to the taskbar in Windows.</p>"},{"location":"linux/Ricing/#polybar-polybar","title":"Polybar (<code>polybar</code>)","text":""},{"location":"linux/Ricing/#icon-themes","title":"Icon Themes","text":""},{"location":"linux/Ricing/#papirus","title":"Papirus","text":"<p><code>$ yay -S papirus-icon-theme-git</code></p> <p></p>"},{"location":"linux/Ricing/#breeze","title":"Breeze","text":"<p><code>$ yay -S xcursor-breeze</code></p> <p></p>"},{"location":"linux/Setting%20up%20GRUB/","title":"Setting up a GRUB partition","text":"<ol> <li> <p>Create an EFI partition at 512 MB</p> </li> <li> <p>Set the type of the partition to \"EFI System\"</p> </li> <li> <p>Create a FAT32 filesystem on it (assuming <code>/dev/sda1</code> is your EFI partition)</p> <pre><code>mkfs.fat -F32 /dev/sda1\n</code></pre> </li> <li> <p>Ensure that the required packages are installed</p> <pre><code>pacman -S grub efibootmgr\n# if GRUB should detect other operating systems\npacman -S os-prober\n</code></pre> </li> <li> <p>Create a folder to mount the partition and mount it</p> <pre><code>mkdir /efi\nmount /dev/sda1 /efi\n</code></pre> </li> <li> <p>Install GRUB</p> <pre><code>grub-install --target=x86_64-efi --bootloader-id=GRUB --efi-directory=/efi\n</code></pre> </li> <li> <p>Configure GRUB</p> <pre><code>grub-mkconfig -o /boot/grub/grub.cfg\n</code></pre> </li> </ol>"},{"location":"linux/SteamOS/","title":"SteamOS","text":""},{"location":"linux/SteamOS/#accessing-bios","title":"Accessing BIOS","text":"<p>Access BIOS -&gt; hold VOLUME UP + POWER until chime is heard Access boot menu -&gt; hold VOLUME DOWN + POWER until chime is heard</p>"},{"location":"linux/SteamOS/#addons-tweaks","title":"Addons / Tweaks","text":""},{"location":"linux/SteamOS/#emudeck","title":"EmuDeck","text":"<p>website installer (.desktop file)</p>"},{"location":"linux/SteamOS/#cryoutilities","title":"CryoUtilities","text":"<p>website installer (.desktop file)</p>"},{"location":"linux/SteamOS/#setup-for-development","title":"Setup for Development","text":"<pre><code># set sudo password (preserved between OS updates)\n$ passwd\n\n# disable readonly mode\n$ sudo steamos-readonly disable\n\n# set up pacman-key\n$ sudo pacman-key --init\n$ sudo pacman-key --populate archlinux\n\n\n# install base-devel (overwrite required if files carried over from previous OS)\n$ sudo pacman -S --overwrite \\* base-devel\n\n# reinstall packages which may have missing files\n$ sudo pacman -S glibc linux-api-headers libarchive\n\n# install yay\n$ cd /tmp &amp;&amp; git clone 'https://aur.archlinux.org/yay.git' &amp;&amp; cd /tmp/yay &amp;&amp; makepkg -si &amp;&amp; cd ~ &amp;&amp; rm -rf /tmp/yay/\n\n\n# setup vscode?\n$ yay -S visual-studio-code-bin\n\n\n# setup python?\n$ sudo pacman -S python python-pip\n</code></pre>"},{"location":"linux/Storage%20Drives/","title":"Storage Drives","text":""},{"location":"linux/Storage%20Drives/#listing-drives","title":"Listing Drives","text":"<p>Listing all mounted or unmounted drives on a system (device path, UUID, drive name, filesystem, etc.): <pre><code>$ sudo blkid\n</code></pre></p>"},{"location":"linux/Storage%20Drives/#mounting-drives","title":"Mounting Drives","text":"<p>Mounting a drive. The directory that a drive is being mounted to needs to exist before attempting to mount. <pre><code># create the directory if it doesn't exist\n$ sudo mkdir &lt;dest&gt;\n$ sudo chown &lt;user&gt;:&lt;group&gt; &lt;dest&gt;\n\n# mount the drive\n$ sudo mount &lt;device&gt; &lt;dest&gt;\n</code></pre></p>"},{"location":"linux/Storage%20Drives/#retrieving-a-user-or-group-id","title":"Retrieving a User or Group ID","text":"<p>Users and groups are associated with an ID, which is needed to set the owner of an automounted drive.</p> <p>Retrieving user ID, group ID, and all groups for a user: <pre><code>$ id &lt;username&gt;\n</code></pre> Retrieving a user ID (two methods): <pre><code># using id (without username, defaults to current user)\n$ id -u &lt;username&gt;\n\n# using shell variable\n$ echo $UID\n</code></pre> Retrieving a group ID: <pre><code>$ id -g &lt;username&gt;\n</code></pre></p>"},{"location":"linux/Useful%20Commands/","title":"Useful Commands","text":"<pre><code># lists storage devices / partitions\nfdisk -l\n\n# checks free/used disk space\ndf -h  # displays sizes as MB, GB, etc.\n\n# open process viewer (similar to task manager in Windows)\nhtop\n\n# kill a process by program name (similar to stopping a task in Windows)\npkill &lt;name&gt;\n\n# immediately shutdown PC\npoweroff\n\n# put PC to sleep\nsystemctl suspend\n</code></pre>"},{"location":"m8/fm%20synth%20planning%20101/","title":"M8 FM Synth Planning 101","text":"<p>based on https://www.youtube.com/watch?v=1XbrTC0NndM</p> <ol> <li>Layers</li> <li>Algorithms &amp; Operators</li> <li>Envelopes</li> <li>Feedback</li> <li>Fine Tuning</li> </ol>"},{"location":"m8/resources/","title":"Resources","text":""},{"location":"m8/resources/#samples","title":"Samples","text":"<p>dx100 MONO BASS from @ddmm64 Synplant from @elfakyn PO14 sub from @kaibuster PO137 rick &amp; morty from @kaibuster PO20 arcade from @kaibuster PO24 office from @hellenbutterlips PO32 tonic (gdrive) from @caleb2770 EP133 koii from @curi 400-499 300-399 100-199 1-99 200-299 SP0-256 voice synthesis from @peterswimm Synth guitar from @laamaa Various synth samples from @trash80</p>"},{"location":"m8/resources/#toysother","title":"Toys/Other","text":"<p>SPEAK AND SPELL from @jegasus</p>"},{"location":"m8/resources/#drum-machines","title":"Drum Machines","text":"<p>Boss DR-220E from @hibernateaudio Korg Monotribe from @mrdrcat 1bit Houstontracker2 (14 slices) from @defensemechanism VXXY DCM8 from @trash80 Yamaha QY100 from @rmri Yamaha SY22 from @OPdbx Yamaha TG500 from @ineffable HeXaWe Proteus VX from @ineffable Roland TR707 (file sliced) from @defensemechanism Roland TR727 (file sliced) from @defensemechanism Casiotone CT-370 from @carbonthief Korg DDD-1 and DDD-5 (99 slices) from @peteperson Various drum machines from @dhuck OPL3/YMF262 from @ddmm64 Roland JV2080 from @trash80 TR-606 from @pselodux</p>"},{"location":"m8/resources/#sampled-instruments","title":"Sampled Instruments","text":"<p>Metal Guitar (80 slices) by @cyclpsrock Metal/Lofi/Ambient Guitar by @1wildrogue Metal Guitar by @laserdogrob Kalimba by @nicovr Dark Electric Piano by @impbox Rhodes (53 slices) by @defensemechanism</p>"},{"location":"m8/resources/#soundfonts-wavetables","title":"Soundfonts / Wavetables","text":"<p>Assorted osc samples from @peterswimm spcs rips from @peterswimm </p>"},{"location":"m8/resources/#misc-samples","title":"Misc Samples","text":"<p>Sound of Work Blacksmith Samples (64 slices) from @ldezem</p>"},{"location":"m8/resources/#sample-packs","title":"Sample Packs","text":"<p>Apticx PD Drumkit (link) by @apticx RSKT Sample Pack (gumroad) by @rskt</p>"},{"location":"m8/resources/#other-sample-packs","title":"Other Sample Packs","text":"<p>(note: the license of these samples may be unknown)</p> <p>lofi_kit.7z</p>"},{"location":"m8/resources/#instruments","title":"Instruments","text":"<p>M8-303 by @mikey303 (message for more info)</p>"},{"location":"m8/themes/","title":"Themes","text":"<p>## Themes</p> <p>BAUHAUS by @ryry (download)</p> <p>fast tracker 2 theme by @pselodux (download)</p> <p></p> <p>FUNKTRONIC2 by @disposableplanet (download)</p> <p></p> <p>rose pine by @jupart (based on https://rosepinetheme.com/) (download)</p> <p>monocolor themes (.zip) by @verbastel (download)</p> <p></p> <p>Modus Operandi theme by @jupart (download)</p> <p></p> <p>Tycho theme by @antsa (dark) (light)</p> <p> </p> <p>gameboy theme by @monodestroyer (download)</p> <p>Burnt by @ahlstrominfo (download)</p> <p></p> <p>Embark theme (based on https://embark-theme.github.io/) by @toyz (download) (high contrast)</p> <p></p> <p>Polyend Tracker theme by @liminaleris (download)</p> <p></p> <p>Skeletor by @enduss (download))</p> <p></p> <p>Bi theme by @sleepside (download) </p> <p>][c theme by @distropolis (download)</p> <p></p> <p>Halloween theme by @spiffe (download)</p> <p></p> <p>Amaterasu theme (based off the game Okami) by @s0nlxaftrsh0ck (download) </p> <p>Rez theme by @s0nlxaftrsh0ck (download) </p> <p>Treydark by @fracture (link) </p> <p>designer by @wangus (download) (light)  </p> <p>BR by @256k (download) </p> <p>Monokai theme by @oks2024 (download)</p> <p></p> <p>Monokai theme by @kkampy (download)  </p> <p>JD-08 theme by @impbox (no link, see screenshot to replicate) </p> <p>CANARI by @256k (download)</p> <p></p> <p>LGPT PSP theme by @256k (download)</p> <p>LTPNK by @rupa (light theme) (download)</p> <p>Gameboy theme by @peynt (download) </p> <p>Solarized theme by @masupert (dark)(light)  </p> <p>Mono Orange by @masupert (download) </p> <p>HENLEY_ORANG by @mint_sauce (download) </p> <p>Synthwave theme by @theejm3 (download) </p> <p>Amber/Seaweed themes by @jlk (amber)(seaweed) </p> <p>Gruvbox theme by @zurvan (download) </p> <p>Darcula theme by @auz (download) </p> <p>BACK2CLASS by @archiefunker (download)</p> <p>One Dark theme by @rj_eckie (download) </p> <p>DUNGEON by @apticx (download) </p> <p>EASYEYE by @apticx (download) </p> <p>OVERWORLD by @apticx (download) </p> <p>SAKURA by @apticx (download) </p> <p>SUNLIGHT by @apticx (download) </p> <p>NIGHT_PINK by @skkeye (download) </p> <p>Ableton Live theme by @skkeye (download) </p> <p>Cobalt2 theme by @gamingrobot (download) </p>"}]}